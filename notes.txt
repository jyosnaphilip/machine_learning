For large datasets consider using LinearSVC or SGDClassifier instead, possibly after a Nystroem 
transformer or other Kernel Approximation.


Parameters:
C float, default=1.0
Regularization parameter. The strength of the regularization is inversely proportional to C. Must be strictly positive.
 The penalty is a squared l2 penalty.

kernel{‘linear’, ‘poly’, ‘rbf’, ‘sigmoid’, ‘precomputed’} or callable, default=’rbf’
Specifies the kernel type to be used in the algorithm. If none is given, ‘rbf’ will be used. If a callable is given 
it is used to pre-compute the kernel matrix from data matrices; that matrix should be an array of shape (n_samples, n_samples). For an intuitive visualization of different kernel types see Plot classification boundaries with different SVM Kernels.

degree int, default=3
Degree of the polynomial kernel function (‘poly’). Must be non-negative. Ignored by all other kernels.

gamma{‘scale’, ‘auto’} or float, default=’scale’
Kernel coefficient for ‘rbf’, ‘poly’ and ‘sigmoid’.

if gamma='scale' (default) is passed then it uses 1 / (n_features * X.var()) as value of gamma,

if ‘auto’, uses 1 / n_features

if float, must be non-negative.

coef0 float, default=0.0
Independent term in kernel function. It is only significant in ‘poly’ and ‘sigmoid’.

shrinking bool, default=True
Whether to use the shrinking heuristic.

probability bool, default=False
Whether to enable probability estimates. This must be enabled prior to calling fit,
 will slow down that method as it internally uses 5-fold cross-validation, 
and predict_proba may be inconsistent with predict.

tol float, default=1e-3
Tolerance for stopping criterion.

cache_size float, default=200
Specify the size of the kernel cache (in MB).

class_weight dict or ‘balanced’, default=None
Set the parameter C of class i to class_weight[i]*C for SVC. If not given, all classes are supposed to have weight one.
 The “balanced” mode uses the values of y to automatically adjust weights inversely proportional to class frequencies
  in the input data as n_samples / (n_classes * np.bincount(y)).

verbose bool, default=False
Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that,
 if enabled, may not work properly in a multithreaded context.

max_iter int, default=-1
Hard limit on iterations within solver, or -1 for no limit.

decision_function_shape{‘ovo’, ‘ovr’}, default=’ovr’
Whether to return a one-vs-rest (‘ovr’) decision function of shape (n_samples, n_classes) as all other classifiers,
 or the original one-vs-one (‘ovo’) decision function of libsvm which has shape (n_samples, n_classes * (n_classes - 1) / 2).
  However, note that internally, one-vs-one (‘ovo’) is always used as a multi-class strategy to train models; 
  an ovr matrix is only constructed from the ovo matrix. The parameter is ignored for binary classification.


break_ties bool, default=False
If true, decision_function_shape='ovr', and number of classes > 2, predict will break ties
 according to the confidence values of decision_function; otherwise the first class among the 
 tied classes is returned. Please note that breaking ties comes at a relatively high computational cost compared
  to a simple predict.


random_state int, RandomState instance or None, default=None
Controls the pseudo random number generation for shuffling the data for probability estimates.
 Ignored when probability is False. Pass an int for reproducible output across multiple function calls. 

Attributes:
class_weight_ ndarray of shape (n_classes,)
Multipliers of parameter C for each class. Computed based on the class_weight parameter.

classes_ ndarray of shape (n_classes,)
The classes labels.

coef_ ndarray of shape (n_classes * (n_classes - 1) / 2, n_features)
Weights assigned to the features when kernel="linear".

dual_coef_ ndarray of shape (n_classes -1, n_SV)
Dual coefficients of the support vector in the decision function (see Mathematical formulation), multiplied by their targets. For multiclass, coefficient for all 1-vs-1 classifiers. The layout of the coefficients in the multiclass case is somewhat non-trivial. See the multi-class section of the User Guide for details.

fit_status_ int
0 if correctly fitted, 1 otherwise (will raise warning)

intercept_ ndarray of shape (n_classes * (n_classes - 1) / 2,)
Constants in decision function.

n_features_in_ int
Number of features seen during fit.

feature_names_in_ ndarray of shape (n_features_in_,)
Names of features seen during fit. Defined only when X has feature names that are all strings.


n_iter_ ndarray of shape (n_classes * (n_classes - 1) // 2,)
Number of iterations run by the optimization routine to fit the model. 
The shape of this attribute depends on the number of models optimized which in turn
 depends on the number of classes.



support_ ndarray of shape (n_SV)
Indices of support vectors.

support_vectors_ ndarray of shape (n_SV, n_features)
Support vectors. An empty array if kernel is precomputed.

n_support_ ndarray of shape (n_classes,), dtype=int32
Number of support vectors for each class.

probA_ ndarray of shape (n_classes * (n_classes - 1) / 2)
Parameter learned in Platt scaling when probability=True.

probB_ ndarray of shape (n_classes * (n_classes - 1) / 2)
Parameter learned in Platt scaling when probability=True.

shape_fit_ tuple of int of shape (n_dimensions_of_X,)
Array dimensions of training vector X.