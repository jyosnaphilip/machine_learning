confusion matrix to evaluate the accuracy of a classification.

Parameters:
y_true array-like of shape (n_samples,)
Ground truth (correct) target values.

y_pred array-like of shape (n_samples,)
Estimated targets as returned by a classifier.

labels array-like of shape (n_classes), default=None
List of labels to index the matrix. This may be used to reorder or select a subset of labels. 
If None is given, those that appear at least once in y_true or y_pred are used in sorted order.

sample_weight array-like of shape (n_samples,), default=None
Sample weights.



normalize{‘true’, ‘pred’, ‘all’}, default=None
Normalizes confusion matrix over the true (rows), predicted (columns) conditions or all the population.
 If None, confusion matrix will not be normalized.

Returns:
Cnd array of shape (n_classes, n_classes)
Confusion matrix whose i-th row and j-th column entry indicates the number of samples with true label being i-th class
 and predicted label being j-th class.

Examples

>>> from sklearn.metrics import confusion_matrix
>>> y_true = [2, 0, 2, 2, 0, 1]
>>> y_pred = [0, 0, 2, 2, 0, 2]
>>> confusion_matrix(y_true, y_pred)
array([[2, 0, 0],
       [0, 0, 1],
       [1, 0, 2]])
>>> y_true = ["cat", "ant", "cat", "cat", "ant", "bird"]
>>> y_pred = ["ant", "ant", "cat", "cat", "ant", "cat"]
>>> confusion_matrix(y_true, y_pred, labels=["ant", "bird", "cat"])
array([[2, 0, 0],
       [0, 0, 1],
       [1, 0, 2]])
In the binary case, we can extract true positives, etc. as follows:

>>> tn, fp, fn, tp = confusion_matrix([0, 1, 0, 1], [1, 1, 1, 0]).ravel()
>>> (tn, fp, fn, tp)
(0, 2, 1, 1)